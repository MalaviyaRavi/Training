import { INotificationEventData } from '../Modules/Verto/util/interfaces';
import { Env, RTCElement } from './types';
export interface ICredentials {
    username?: string;
    password?: string;
    token?: string;
}
export interface ISIPClientOptions {
    host?: string;
    port?: number;
    env?: Env;
    project?: string;
    credentials: ICredentials;
    localElement?: RTCElement;
    remoteElement?: RTCElement;
    useMic?: string | boolean;
    useSpeaker?: string | boolean;
    useCamera?: string | boolean;
    displayName?: string;
    ringFile?: string;
}
export interface IClientOptions {
    login_token: string;
    login?: string;
    password?: string;
    ringtoneFile?: string;
    ringbackFile?: string;
}
export interface ISIPCallOptions {
    destinationNumber: string;
    remoteCallerName?: string;
    remoteCallerNumber?: string;
    callerName?: string;
    callerNumber?: string;
    id?: string;
    localStream?: MediaStream;
    remoteStream?: MediaStream;
    localElement?: HTMLMediaElement | string | Function;
    remoteElement?: HTMLMediaElement | string | Function;
    iceServers?: RTCIceServer[];
    audio?: boolean | MediaTrackConstraints;
    video?: boolean | MediaTrackConstraints;
    useStereo?: boolean;
    micId?: string;
    camId?: string;
    speakerId?: string;
    onNotification?: Function;
    telnyxCallControlId?: string;
    telnyxSessionId?: string;
    telnyxLegId?: string;
    clientState?: string;
}
export interface ICall {
    setAudioInDevice(deviceId: string): Promise<any>;
    setAudioOutDevice(deviceId: string): Promise<any>;
    setVideoDevice(deviceId: string): Promise<any>;
}
export interface ICallOptions {
    destinationNumber: string;
    callerNumber?: string;
    callerName?: string;
    id?: string;
    telnyxCallControlId?: string;
    telnyxSessionId?: string;
    telnyxLegId?: string;
    clientState?: string;
    localStream?: MediaStream;
    remoteStream?: MediaStream;
    localElement?: HTMLMediaElement | string;
    remoteElement?: HTMLMediaElement | string;
    iceServers?: RTCIceServer[];
    audio?: boolean;
    video?: boolean;
    useStereo?: boolean;
    micId?: string;
    camId?: string;
    speakerId?: string;
    onNotification?: Function;
    mediaSettings: {
        useSdpASBandwidthKbps: boolean;
        sdpASBandwidthKbps: number;
    };
}
export interface INotification extends Omit<INotificationEventData, 'call'> {
    type: string;
    call?: ICall;
    error?: Error;
}
export interface MessageEvents {
    ready: () => void;
    registered: () => void;
    unregistered: () => void;
    error: () => void;
    callUpdate: (call: ICall) => void;
    'socket.error': (error: Error) => void;
    'socket.connect': () => void;
    'socket.close': (error?: Error) => void;
}
